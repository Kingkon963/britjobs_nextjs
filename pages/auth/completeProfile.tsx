import * as React from "react";
import Head from "next/head";
import { FaMale, FaFemale } from "react-icons/fa";
import { useRouter } from "next/router";
import ThemeSwitch from "@components/ThemeSwitch";
import { FieldError, useForm } from "react-hook-form";
import CompleteProfileFormData from "types/CompleteProfileFormData";
import { useMutation, useQuery } from "react-query";
import createContactDetails from "api/createContactDetails";
import updateContactDetailsUser from "api/updateContactDetailsUser";
import { useSession } from "next-auth/react";
import getMyRole from "api/getMyRole";

function FieldError({ error }: { error: FieldError | undefined }) {
  if (error === undefined) return <></>;
  return (
    <label className="label">
      <p className="label-text-alt text-error text-xs italic tracking-wide">{error.message}</p>
    </label>
  );
}

const CompleteProfile: React.FC = () => {
  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<CompleteProfileFormData>();
  const session = useSession();
  const updateContactDetailsUserMutaion = useMutation(updateContactDetailsUser);
  const createContactDetailsMutaion = useMutation(createContactDetails);

  const onSubmit = (data: CompleteProfileFormData) => {
    createContactDetailsMutaion.mutate(data, {
      onSuccess: (res) => {
        const contactDetailsID = res.data.data.id;
        if (session.data) {
          const userID = session.data.id;

          updateContactDetailsUserMutaion.mutate(
            { id: contactDetailsID, userId: userID },
            {
              onSuccess: (res) => {
                const userRole = session.data.user.role;
                if (userRole?.name === "Job Seeker") {
                  router.replace("/seeker/dashboard");
                } else if (userRole?.name === "Job Provider") {
                  router.replace("/provider/dashboard");
                }
              },
            }
          );
        }
      },
    });
  };

  return (
    <div className="flex flex-col items-center justify-center gap-5">
      <Head>
        <title>Britjobs | Complete Your Profile</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="card bg-base-200 relative mt-10 w-full max-w-7xl rounded-3xl p-10">
        <div className="h-48 w-48 rounded-full bg-white"></div>
        <div className="absolute top-10 right-10">
          <ThemeSwitch />
        </div>
      </div>
      <div className="card w-full max-w-7xl rounded-3xl p-10 px-24">
        <form className="flex flex-col" onSubmit={handleSubmit(onSubmit)}>
          <div className="grid grid-cols-2 gap-5">
            <h1 className=" col-span-full mb-5 text-4xl">Personal Details</h1>

            <div className="form-control w-full max-w-lg">
              <label className="label">
                <span className="label-text">First Name *</span>
              </label>
              <input
                {...register("firstName", {
                  required: "First Name is required",
                })}
                type="text"
                placeholder="Enter your First Name"
                className={`input ${errors.firstName ? "input-error" : ""} bg-base-200 w-full`}
              />
              <FieldError error={errors.firstName} />
            </div>

            <div className="form-control w-full max-w-lg">
              <label className="label">
                <span className="label-text">Last Name *</span>
              </label>
              <input
                {...register("lastName", { required: "Last Name is required" })}
                type="text"
                placeholder="Enter your Last Name"
                className={`input ${errors.lastName ? "input-error" : ""} bg-base-200 w-full`}
              />
              <FieldError error={errors.lastName} />
            </div>

            <div className="form-control w-full max-w-lg">
              <label className="label">
                <span className="label-text">Date of Birth *</span>
              </label>
              <input
                {...register("dateOfBirth", {
                  valueAsDate: true,
                  required: "please provide your date of birth",
                })}
                type="date"
                className={`input ${errors.dateOfBirth ? "input-error" : ""} bg-base-200 w-full`}
              />
              <FieldError error={errors.dateOfBirth} />
            </div>

            <div className="form-control w-full max-w-lg">
              <div className="mt-auto flex flex-row items-center gap-5">
                <label className="label">
                  <span className="label-text">Gender *</span>
                </label>
                <label htmlFor="male" className="relative">
                  <input
                    {...register("gender", {
                      required: "Please choose your gender",
                    })}
                    type="radio"
                    className="radio checked:bg-base-200 h-16 w-16 rounded-xl border-0"
                    name="gender"
                    value="male"
                    id="male"
                  />
                  <FaMale className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 cursor-pointer text-4xl" />
                </label>
                <label htmlFor="felmale" className="relative">
                  <input
                    {...register("gender")}
                    type="radio"
                    className="radio checked:bg-base-200 h-16 w-16 rounded-xl border-0 "
                    name="gender"
                    value="female"
                    id="felmale"
                  />
                  <FaFemale className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 cursor-pointer text-4xl" />
                </label>
              </div>
              <FieldError error={errors.gender} />
            </div>

            <div className="divider col-start-1 col-end-3"></div>

            <h1 className=" col-span-full mb-5 text-4xl">Address</h1>
            <div className="form-control w-full max-w-lg">
              <label className="label">
                <span className="label-text">Postcode *</span>
              </label>
              <input
                {...register("postcode", {
                  required: "Postcode is required",
                })}
                type="number"
                placeholder="Enter your Postcode"
                className={`input ${errors.postcode ? "input-error" : ""} bg-base-200 w-full`}
              />
              <FieldError error={errors.postcode} />
            </div>

            <div></div>

            <div className="form-control col-span-full w-full">
              <label className="label">
                <span className="label-text">Address Line *</span>
              </label>
              <input
                {...register("addressLine", {
                  required: "Address Line is required",
                })}
                type="text"
                placeholder="Enter your Address Line"
                className={`input ${errors.addressLine ? "input-error" : ""} bg-base-200 w-full`}
              />
              <FieldError error={errors.addressLine} />
            </div>

            <div className="form-control w-full max-w-lg">
              <label className="label">
                <span className="label-text">City *</span>
              </label>
              <input
                {...register("city", {
                  required: "City is required",
                })}
                type="text"
                placeholder="Enter your City"
                className={`input ${errors.city ? "input-error" : ""} bg-base-200 w-full`}
              />
              <FieldError error={errors.city} />
            </div>
          </div>
          <button
            className={`btn btn-primary ${
              createContactDetailsMutaion.isLoading ? "loading" : ""
            } mt-10 w-full max-w-sm self-end`}
            type="submit"
            disabled={createContactDetailsMutaion.isLoading}
          >
            Save
          </button>
          {createContactDetailsMutaion.isError && (
            <p className="text-error">Failed to save your data! Please try again.</p>
          )}
        </form>
      </div>
    </div>
  );
};

export default CompleteProfile;
