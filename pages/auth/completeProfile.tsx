import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { MdHome, MdError } from "react-icons/md";
import LOGIN from "@graphQL/mutations/login.gql";
import { useMutation } from "@apollo/client";
import { LoginMutation } from "@graphQL/graphql-operations";
import keyGen from "@utils/genKey";
import { useRouter } from "next/router";
import TextField from "@components/EditableTextField";

enum ACTIONS {
  SET_IDENTIFIER,
  SET_PASSWORD,
  SET_ERROR,
  RESET_ERROR,
}

interface LoginInterface {
  identifier: string;
  password: string;
  error?: string;
}
interface ActionType {
  type: ACTIONS;
  payload?: string;
}

const initState: LoginInterface = {
  identifier: "",
  password: "",
  error: undefined,
};

const reducer = (prevState: LoginInterface, action: ActionType): LoginInterface => {
  switch (action.type) {
    case ACTIONS.SET_IDENTIFIER:
      if (action.payload !== undefined) return { ...prevState, identifier: action.payload };
      return prevState;

    case ACTIONS.SET_PASSWORD:
      if (action.payload !== undefined) return { ...prevState, password: action.payload };
      return prevState;

    case ACTIONS.SET_ERROR:
      if (action.payload !== undefined) return { ...prevState, error: action.payload };
      return prevState;
    case ACTIONS.RESET_ERROR:
      return { ...prevState, error: undefined };
    default:
      throw new Error("No reducer found for this action: " + ACTIONS[action.type]);
  }
};

const CompleteProfile: React.FC = () => {
  const [state, dispatch] = React.useReducer(reducer, initState);
  const [runLogin, { loading, data, error }] = useMutation<LoginMutation>(LOGIN, {
    errorPolicy: "all",
  });
  const router = useRouter();

  React.useEffect(() => {
    if (error?.message) {
      dispatch({ type: ACTIONS.SET_ERROR, payload: error.message });
    }
  }, [error]);

  return (
    <div className="flex h-screen justify-center gap-5">
      <Head>
        <title>Britjobs | Complete Your Profile</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="absolute top-5 left-5 z-10">
        <Link href="/" passHref>
          <button className="btn btn-circle btn-lg">
            <MdHome className="text-3xl" />
          </button>
        </Link>
      </div>
      <ul className="steps steps-vertical">
        <li className="step step-primary">Register</li>
        <li className="step step-primary">Choose plan</li>
        <li className="step ">Purchase</li>
        <li className="step">Receive Product</li>
      </ul>

      <div className="card bg-base-200 my-8 w-7/12 p-10">
        <div className="form-control">
          <div className="flex w-fit gap-5">
            <div className="form-control">
              <label className="label cursor-pointer gap-2">
                <span className="label-text">Job Provider</span>
                <input type="radio" name="radio-6" className="radio checked:bg-blue-500" checked />
              </label>
            </div>
            <div className="form-control">
              <label className="label cursor-pointer gap-2">
                <span className="label-text">Job Seeker</span>
                <input type="radio" name="radio-6" className="radio checked:bg-blue-500" checked />
              </label>
            </div>
          </div>

          <div className="divider"></div>

          <label className="label">
            <span className="label-text">Password</span>
          </label>
          <input
            type="password"
            placeholder="Enter your password"
            className="input max-w-lg"
            value={state.password}
            onChange={(e) => dispatch({ type: ACTIONS.SET_PASSWORD, payload: e.target.value })}
          />
          <label className="label">
            <a href="" className="label-text-alt text-error">
              Forgot password?
            </a>
          </label>

          <button className="btn btn-primary mt-5 max-w-lg" disabled={loading}>
            Login
          </button>
          <label className="label">
            <span className="label-text-alt text-info cursor-pointer">
              <Link href="/register">Register</Link>
            </span>
          </label>
        </div>
        <div className="mt-2 flex flex-col gap-2">
          {
            <div className={`alert alert-error ${state.error !== undefined ? "" : "invisible"}`}>
              <div className="flex-1 items-center gap-2">
                <MdError className="text-lg" />
                <label>{state.error}</label>
              </div>
            </div>
          }
        </div>
      </div>
    </div>
  );
};

export default CompleteProfile;
