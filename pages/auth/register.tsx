import * as React from "react";
import { useReducer, useContext } from "react";
import Head from "next/head";
import Link from "next/link";
import { MdHome, MdError } from "react-icons/md";
import {
  RegisterMutation,
  UsersPermissionsLoginPayload,
  UsersPermissionsRegisterInput,
} from "@graphQL/graphql-operations";
import REGISTER from "@graphQL/mutations/register.gql";
import { useMutation } from "@apollo/client";
import keyGen from "@utils/genKey";
import { useRouter } from "next/router";
import { signIn, useSession, getCsrfToken, getSession } from "next-auth/react";

enum ACTIONS {
  SET_USERTYPE,
  SET_USERNAME,
  SET_EMAIL,
  SET_PASSWORD,
  SET_CONF_PASSWORD,
  SET_ERROR,
  RESET_ERROR,
  RESET,
}

interface Action {
  type: ACTIONS;
  payload?: string | number;
}

enum UserTypes {
  JOB_PROVIDER = 3,
  JOB_SEEKER = 4,
}

interface RegisterInput extends UsersPermissionsRegisterInput {
  confirmPass: string;
}

interface RegisterPageState extends RegisterInput {
  error?: string;
  userType: number;
}

const initState: RegisterPageState = {
  username: "",
  email: "",
  password: "",
  confirmPass: "",
  error: undefined,
  userType: UserTypes.JOB_SEEKER,
};

const reducer = (state: RegisterPageState, action: Action): RegisterPageState => {
  switch (action.type) {
    case ACTIONS.SET_USERTYPE:
      if (action.payload !== undefined && typeof action.payload === "number") {
        return { ...state, userType: action.payload };
      }
      return state;

    case ACTIONS.SET_USERNAME:
      if (action.payload !== undefined && typeof action.payload === "string") {
        return { ...state, username: action.payload };
      }
      return state;

    case ACTIONS.SET_EMAIL:
      if (action.payload !== undefined && typeof action.payload === "string") {
        return { ...state, username: action.payload, email: action.payload };
      }
      return state;

    case ACTIONS.SET_PASSWORD:
      if (action.payload !== undefined && typeof action.payload === "string") {
        return { ...state, password: action.payload };
      }
      return state;

    case ACTIONS.SET_CONF_PASSWORD:
      if (action.payload !== undefined && typeof action.payload === "string") {
        return { ...state, confirmPass: action.payload };
      }
      return state;

    case ACTIONS.SET_ERROR:
      if (action.payload !== undefined && typeof action.payload === "string") {
        return { ...state, error: action.payload };
      }
      return state;

    case ACTIONS.RESET_ERROR:
      return { ...state, error: undefined };

    case ACTIONS.RESET:
      return initState;

    default:
      throw new Error("Reducer doesn't have any handler for this Action");
  }
};

const Register: React.FC = () => {
  const [state, dispatch] = useReducer(reducer, initState);
  const [runRegister, { loading, data, error }] = useMutation<RegisterMutation>(REGISTER, {
    errorPolicy: "all",
  });
  const router = useRouter();
  const { data: session } = useSession();

  const isValidData = (): boolean => {
    if (state.username.length === 0) {
      dispatch({ type: ACTIONS.SET_ERROR, payload: "Please provide a username" });
      return false;
    }
    if (state.email.length === 0) {
      dispatch({ type: ACTIONS.SET_ERROR, payload: "Please provide an email" });
      return false;
    }
    if (state.password.length === 0 || state.password.length < 6) {
      dispatch({
        type: ACTIONS.SET_ERROR,
        payload: "Please provide a password greater than 6 charecter",
      });
      return false;
    }
    if (state.password !== state.confirmPass) {
      dispatch({ type: ACTIONS.SET_ERROR, payload: "Password doesn't match" });
      return false;
    }

    return true;
  };

  if (session) {
    router.push("/");
  }

  return (
    <div className="flex h-screen items-center justify-center">
      <Head>
        <title>Britjobs | Register</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="absolute top-5 left-5 z-10">
        <Link href="/" passHref>
          <button className="btn btn-circle btn-lg">
            <MdHome className="text-3xl" />
          </button>
        </Link>
      </div>

      <div className="w-full max-w-xl">
        <div className="card bg-base-200 p-10">
          <div className="form-control">
            {/* UserType Selection */}
            <div className="flex flex-col">
              <label className="label w-fit cursor-pointer">
                <input
                  type="radio"
                  name="radio-6"
                  className="radio  mr-5  checked:animate-spin checked:bg-red-500"
                  checked={state.userType === UserTypes.JOB_SEEKER}
                  readOnly
                  onClick={() =>
                    dispatch({ type: ACTIONS.SET_USERTYPE, payload: UserTypes.JOB_SEEKER })
                  }
                />
                <span className="label-text text-lg">I&apos;m searching Jobs</span>
              </label>
              <label className="label w-fit cursor-pointer">
                <input
                  type="radio"
                  name="radio-6"
                  className="radio  mr-5  checked:animate-spin checked:bg-red-500"
                  checked={state.userType === UserTypes.JOB_PROVIDER}
                  readOnly
                  onClick={() => {
                    dispatch({ type: ACTIONS.SET_USERTYPE, payload: UserTypes.JOB_PROVIDER });
                  }}
                />
                <span className="label-text text-lg">I&apos;m hiring</span>
              </label>
            </div>

            <div className="divider"></div>

            <button
              className="btn bg-blue-500"
              onClick={() =>
                signIn("google", {
                  callbackUrl: "/",
                })
              }
            >
              Signin with Google
            </button>

            {/* <div className="form-control">
              <label className="label">
                <span className="label-text">Email</span>
              </label>
              <input
                type="email"
                placeholder="email"
                className="input"
                value={state.email}
                onChange={(e) => dispatch({ type: ACTIONS.SET_EMAIL, payload: e.target.value })}
              />

              <label className="label">
                <span className="label-text">Password</span>
              </label>
              <input
                type="password"
                placeholder="Enter your password"
                className="input"
                value={state.password}
                onChange={(e) => dispatch({ type: ACTIONS.SET_PASSWORD, payload: e.target.value })}
              />

              <label className="label">
                <span className="label-text">Confirm Password</span>
              </label>
              <input
                type="password"
                placeholder="Enter your password again"
                className="input"
                value={state.confirmPass}
                onChange={(e) =>
                  dispatch({ type: ACTIONS.SET_CONF_PASSWORD, payload: e.target.value })
                }
              />

              <button
                className={`btn btn-primary mt-5 ${loading ? "loading" : ""}`}
                onClick={() => register()}
                disabled={loading}
              >
                Register
              </button>
              <label className="label">
                <span className="label-text-alt cursor-pointer text-info">
                  <Link href="/auth/login">Login</Link>
                </span>
              </label>
            </div> */}
          </div>
          <div className="mt-2 flex flex-col gap-2">
            {state.error !== undefined && (
              <div className="alert alert-error">
                <div className="flex-1 items-center gap-2">
                  <MdError className="text-lg" />
                  <label>{state.error}</label>
                </div>
              </div>
            )}
            {error?.graphQLErrors.map(({ message }) => {
              return (
                <div className="alert alert-error" key={keyGen()}>
                  <div className="flex-1 items-center gap-2">
                    <MdError className="text-lg" />
                    <label>{message}</label>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Register;
